:root {
  font-size: 62.5%; /* 1rem = 10px */

  --color-base-white: #ffffff;
  --color-base-gray-100: #f5f5f5;
  --color-base-gray-300: #8d8d99;
  --color-base-gray-500: #3d3d3d;
  --color-base-gray-800: #323238;
  --color-base-gray-900: #202024;
}

* {
  margin: 0;
  padding: 0;

  box-sizing: border-box;

  /*Melhorando a qualidade das fontes (textos) */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

body,
input {
  color: var(--color-base-gray-900);
  font-family: "Mulish", sans-serif;
  font-size: 1.6rem;

  background: var(--color-base-white);
}

#app {
  display: grid;
  /* max-content fará com que a caixa se adapte ao conteúdo (header e footer), deixando o restante da visualização disponível para o main (1fr) */
  grid-template-rows: max-content 1fr max-content;
  height: 100vh;
}

.container {
  width: min(112rem, 100%);

  padding: 1.6rem 11.2rem;
  margin: 0 auto;
}

header,
nav,
nav ul {
  font-weight: 700;

  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 7.6rem;
}

nav ul {
  color: var(--color-base-gray-300);
  font-size: 1.8rem;

  list-style: none;
}

nav ul li.active {
  color: var(--color-base-gray-900);
}

/* Flex 1 fará com que a searchbar ocupe todo espaço disponível na caixa */
header form {
  flex: 1;
}

/* Escondendo o label
    Essa técnica é utilizada para esconder o label e manter a acessibilidade. 
    Pois pessoas que utilizam leitores de tela não conseguem ler o que está escrito no placeholder.*/
.input-wrapper label {
  height: 1px;
  width: 1px;

  overflow: hidden;
  position: absolute;
}

.input-wrapper input {
  font-weight: 600;

  border: 0;
  border-radius: 0.5rem;

  width: 100%;
  padding: 1.2rem 1.6rem;
}

.input-wrapper input::placeholder {
  color: var(--color-base-gray-500);
  opacity: 0.56;
}

.avatar {
  height: 4.2rem;
  width: 4.2rem;

  border-radius: 50%;

  /* Adequar imagens inseridas para a altura e largura determinada*/
  object-fit: cover;
}

main {
  background: var(--color-base-gray-100);

  /* "Travar" o HEADER e o FOOTER e deixar apenas o conteúdo interno do MAIN com scroll (mouse)*/
  overflow-y: scroll;
}

main h1 {
  font-size: 2.4rem;
  font-weight: 700;

  margin: 2rem 0 3.6rem;
}

.gallery {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 2.2rem;
}

.card {
  background: var(--color-base-white);

  max-width: 39rem;

  border: 0;
  border-radius: 0.8rem;

  /* Esconder o conteúdo que está saindo da caixa. Ex.: bordas superiores da imagem */
  overflow: hidden;

  /* Aplicar as animações no cartão de forma mais suave*/
  transition: filter, transform .6s ease-in-out;
}

.card img {
  width: 100%;

  /* Ajustando a proporção das imagens (aspect-ratio: width/height)
    e object-fit: cover para a imagem se adequar a proporção desejada */
  aspect-ratio: 16/9;
  object-fit: cover;

  /* Retirar o espaço que ficou entre a imagem e o h2 */
  display: block;
}

.card-details {
  padding: 2.2rem;
}

.card-details h2 {
  font-size: 1.8rem;

  margin-bottom: 1.2rem;
}

.card-details .tags span {
  font-size: 1.2rem;
  text-transform: uppercase;

  padding: 0.8rem;

  background: var(--color-base-gray-100);

  border-radius: 0.6rem;
}

footer p {
  color: var(--color-base-gray-800);
  font-weight: 600;
  text-align: center;
}

/* Animações Header e Footer*/
header {
  /* -100% no header dará a impressão de que o elemento está vindo de fora da tela, de cima para baixo */
  --startY: -100%;
  animation: move 0.2s;
}

footer {
  /* 100% no footer dará a impressão de que o elemento está vindo de fora da tela, de baixo para cima */
  --startY: 100%;
  animation: move 0.2s;
}

/* Animação para que o header e o footer apareçam na tela após o carregamento da mesma */
@keyframes move {
  from {
    transform: translateY(var(--startY));
  }
}

/* Animações na Galeria */
.card {
  /* Foi utilizado uma variável para atribuir o valor de delay da animação.
    Sendo que a animação começa no primeiro cartão após 0.4segundos e continua sucessivamente até o último cartão com um delay de 0.2segundos de diferença para o cartão anterior.
    Ou seja, foi aplicado CSS Inline diretamente em cada cartão com o delay desejado (crescente, de 0.2s maior que o cartão anterior) */
  --delay: 0.4s;
  animation: appear 0.4s var(--delay) backwards;
}

/* Na animação o cartão inicia (0%) "invisível" (opacity: 0) e com um tamanho menor (scale 0.7).
  No meio da animação (50%) o cartão terá um tamanho maior (scale 1.2) que o seu estado final (scale 1),
  dando a impressão de que o cartão está pulando (para frente) na tela.*/
@keyframes appear {
  0% {
    opacity: 0;
    transform: scale(0.7);
  }

  50% {
    transform: scale(1.2);
  }
}

/* Efeito de sombra e aumento do cartão quando passar o mouse em cima*/
.card:hover {
  filter: drop-shadow(0 0 5px var(--color-base-gray-500));
  transform: scale(1.1);

  cursor: pointer;
}